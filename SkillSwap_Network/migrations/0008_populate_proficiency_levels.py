# Generated by Django 5.2.1 on 2025-06-08 05:16

import json
import os
from django.conf import settings
from django.db import migrations


def populate_proficiency_levels(apps, schema_editor):
    """
    Populate the "ProficiencyLevel" model with data from a JSON file.

    It reads proficiency levels details (name, description, and order) from "proficiency_levels.json" file and creates corresponding ProficiencyLevel objects in the
    database.
    It handles cases where the JSON datatmight contain specific keys for these attributes.
    Duplicate proficiency levels names, descriptions, and orders are ignored to prevent errors during re-population.

    Args:
        apps (django.apps.registry.Apps): An Apps registry instance containing the configuration of all installed applications. It is used to get the ProficiencyLevel
        model.
        schema_editor (django.db.backends.base.schema.BaseDataBaseSchemaEditor):
                                          Not directlt used for data population. But is required by Django's RunPython operation signature.
    """
    
    ProficiencyLevel = apps.get_model("SkillSwap_Network", "ProficiencyLevel")
    proficiency_levels_to_create = []
    json_file_path = os.path.join(settings.BASE_DIR, "SkillSwap_Network", "data", "proficiency_levels.json")
    
    with open(json_file_path, mode="r", encoding="utf-8") as file:
        data= json.load(file)

        for item in data:
            if isinstance(item, dict) and "name" in item and "proficiency_level_order" in item:
                level_name = item["name"].strip()
                level_description = item.get("description", "").strip()
                level_order = item["proficiency_level_order"]
                
            proficiency_levels_to_create.append(
                ProficiencyLevel(name=level_name, description=level_description, proficiency_level_order=level_order)
            )

    ProficiencyLevel.objects.bulk_create(proficiency_levels_to_create, ignore_conflicts=True)


def reverse_populate_proficiency_levels(apps, schema_editor):
    """
    Reverses the population of the ProficiencyLevel model by deleting Skills taht were added by "populate_proficiency_levels".

    Used as the 'reverse code' for a Django migration operation.
    It reads names of proficiency levels from "proficiency_levels.json" file and then deletes the corresponding ProficiencyLevel" objects from the database.

    Ensures that the initial data added by the forward migration can be cleanly removed during a migration rollback.

    Args:
        apps (django.apps.registry.Apps): An Apps registry instance containing the configuration of all installed applications. It is used to get the ProficiencyLevel
        model.
        schema_editor (django.db.backends.base.schema.BaseDataBaseSchemaEditor):
                                          Not directlt used for data population. But is required by Django's RunPython operation signature.
    """

    ProficiencyLevel = apps.get_model("SkillSwap_Network", "ProficiencyLevel")
    proficiency_levels_to_delete_names = []
    json_file_path = os.path.join(settings.BASE_DIR, "SkillSwap_Network", "data", "proficiency_levels.json")

    with open(json_file_path, mode="r", encoding="utf-8") as file:
        data= json.load(file)

        for item in data:
            if isinstance(item, dict) and "name" in item:
                proficiency_levels_to_delete_names.append(item["name"].strip())
            elif isinstance(item, str):
                proficiency_levels_to_delete_names.append(item.strip())

    ProficiencyLevel.objects.filter(name__in=proficiency_levels_to_delete_names).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("SkillSwap_Network", "0007_customuser_groups_customuser_user_permissions"),
    ]

    operations = [
        migrations.RunPython(populate_proficiency_levels, reverse_code=reverse_populate_proficiency_levels),
    ]

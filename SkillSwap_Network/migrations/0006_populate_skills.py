# Generated by Django 5.2.1 on 2025-06-07 10:05

import json
import os
from django.conf import settings
from django.db import migrations


def populate_skills(apps, schema_editor):
    """
    Populate the "Skill" model with data from a JSON file.

    It reads skill names from "skills.json" file and creates new Skill objects in the database.
    It handles cases where skill names are either dictionaries with a "name" key or plain strings.
    Duplicate skill names are ignored to prevent errors during re-population.

    Args:
        apps (django.apps.registry.Apps): An Apps registry instance containing the configuration of all installed applications. It is used to get the Skill model.
        schema_editor (django.db.backends.base.schema.BaseDataBaseSchemaEditor):
                                          Not directlt used for data population. But is required by Django's RunPython operation signature.
    """
    
    # Dynamically retrieve the "Skill" model from the "SkillSwap_Network" application
    Skill = apps.get_model("SkillSwap_Network", "Skill")

    skills_to_create = [] # An empty list to hold the created "Skill" objects
    
    # Construct the absolute path to the JSON file
    json_file_path = os.path.join(settings.BASE_DIR, "SkillSwap_Network", "data", "skills.json")
    
    # Read and parse the contents of the JSON file into the "data" variable
    with open(json_file_path, mode="r", encoding="utf-8") as file:
        data= json.load(file)

        for item in data:
            skill_name = None
            # Check if an item is a dictionary and contains a name key
            if isinstance(item, dict) and "name" in item:
                # Extract the skill name and remove any trailing or leading whitespace
                skill_name = item["name"].strip()
                
            # Check if an item is just a string
            elif isinstance(item, str):
                skill_name = item.strip()
                

            # If a valid "skill_name" is found, a new "Skill" object is instantiated with that name and added to the "skills_to_create" list
            if skill_name:
                skills_to_create.append(Skill(name=skill_name))

    # The following line is used to create multiple objects in a singlr database query
    Skill.objects.bulk_create(skills_to_create, ignore_conflicts=True)


def reverse_populate_skills(apps, schema_editor):
    """
    Reverses the population of the Skill model by deleting Skills taht were added by "populate_skills".

    Used as the 'reverse code' for a Django migration operation.
    It reads skill names from "skills.json" file and attempts to delete the corresponding Skill objects from the database.

    Designed to undo the changes made by the "populate_skills" function during a rollback.

    Args:
        apps (django.apps.registry.Apps): An Apps registry instance containing the configuration of all installed applications. It is used to get the Skill model.
        schema_editor (django.db.backends.base.schema.BaseDataBaseSchemaEditor):
                                          Not directlt used for data population. But is required by Django's RunPython operation signature.
    """

    Skill = apps.get_model("SkillSwap_Network", "Skill")

    skills_to_delete_names = []
    json_file_path = os.path.join(settings.BASE_DIR, "SkillSwap_Network", "data", "skills.json")

    with open(json_file_path, mode="r", encoding="utf-8") as file:
        data= json.load(file)

        for item in data:
            skill_name = None
            if isinstance(item, dict) and "name" in item:
                skill_name = item["name"].strip()
            elif isinstance(item, str):
                skill_name = item.strip()

            if skill_name:
                skills_to_delete_names.append(Skill(name=skill_name))

    # Filter the "Skill" model to find all the "Skill" objects whose "name" field is present in the "skills_to_delete_names" list
    Skill.objects.filter(name__in=skills_to_delete_names).delete()


class Migration(migrations.Migration):

    dependencies = [
        (
            "SkillSwap_Network",
            "0005_remove_customuser_bio_remove_customuser_location_and_more",
        ),
    ]

    operations = [
        migrations.RunPython(populate_skills, reverse_code=reverse_populate_skills),
    ]
